## constants ##

# log threshold values
LOG_DEBUG=0
LOG_VERBOSE=2
LOG_QUIET=6
LOG_FORCE=9  # force write regardless of VERBOSE setting

# log file path
LOGFILE='/var/log/rhs-hadoop-install.log'

## functions ##

# check_ssh: verify that the user can passwordless ssh to the passed-in list of
# nodes. Returns 1 on errors.
# Args: $@ = list of nodes.
function check_ssh() {

  local nodes="$@"
  local node; local err; local errcnt=0

  for node in $nodes; do
      [[ "$node" == "$HOSTNAME" ]] && continue # skip
      ssh -q $node exit
      err=$?
      if (( err != 0 )) ; then
        echo "ERROR: cannot passwordless ssh to node $node from $HOSTNAME"
        ((errcnt++))
      else
	debug "passwordless ssh check for \"$node\" passed"
      fi
  done

  (( errcnt > 0 )) && return 1
  return 0
}

# debug: call display() using LOG_DEBUG. $1 can be an echo option or the msg.
# "DEBUG" is prepended to the msg.
function debug() {

  local opt=''
  if (( ${#1} == 2 )) && [[ ${1:0:1} == '-' && ${1:1:1} =~ [a-z] ]] ; then
    opt="$1"; shift # assume echo option
  fi
  display $opt "DEBUG: $1" $LOG_DEBUG
}

# default_nodes: Detects if any/all of the supplied *_node options have been 
# omitted and prompts the user to confirm if they wish to use localhost as 
# the missing node's default value. Following each option is its human readable
# name, eg 'MGMT_NODE' 'management'. Returns 1 if the answer is no.
# Note: the *name* of the variable is passed not its value.
# Note: the node variable is set to HOSTNAME if the user answers yes.
# Uses globals:
#   AUTO_YES
function default_nodes() {

  local varname; local human_name; local node

  while (( $# > 0 )) ; do
    varname=$1; node=${!varname}; human_name="$2"
    if [[ -z "$node" ]] ; then # node omitted
      echo "No $human_name node specified therefore the localhost ($HOSTNAME) is assumed"
      (( ! AUTO_YES )) && ! yesno  "  Continue? [y|N] " && return 1
      eval $varname="$HOSTNAME"
    fi
    shift 2
  done

  return 0
}

# display: append the passed-in message to localhost's logfile, and potentially
# write the message to stdout, depending on the value of the passed-in priority
# setting. A timestamp is prepended to the logfile msg.
# NOTE: $LOGFILE must be defined if logging is desired.
# NOTE: $VERBOSE should be defined if "threshold" echos are desired.
#   $1="-n" or "-e" other echo option, or if no option then $1 = msg,
#   $2=msg prioriy, optional, default=$LOG_QUIET,
#   $3=logfile,     optional, default=$LOGFILE.
function display() {

  local opt=''
  if (( ${#1} == 2 )) && [[ ${1:0:1} == '-' && ${1:1:1} =~ [a-z] ]] ; then
    opt="$1"; shift # assume echo option
  fi

  local pri=${2:-$LOG_QUIET} # default msg priority
  local log=${3:-$LOGFILE}
  local verbose=${VERBOSE:-$LOG_DEBUG} # if VERBOSE not set then always echo msg

  [[ -n "$log" ]] && echo "[$(date +%T)] $1" >> $log
  (( pri >= verbose )) && echo $opt "$1"
}

# err: call force(). Prepend "ERROR" to msg.
# $1= echo option or next arg,
# $2= error number or next arg,
# $3= message.
function err() {

  local num=''; local opt=''
  if (( ${#1} == 2 )) && [[ ${1:0:1} == '-' && ${1:1:1} =~ [a-z] ]] ; then
    opt="$1"; shift # assume echo option
  fi
  [[ "$1" == *[!0-9]* ]] || { num=" $1"; shift; } # assume 1st arg is error num

  force $opt "ERROR$num: $1"
} 

# force: call display() using LOG_FORCE. $1 can be echo option(s) or the msg.
function force() {

  local opt=''
  if (( ${#1} == 2 )) && [[ ${1:0:1} == '-' && ${1:1:1} =~ [a-z] ]] ; then
    opt="$1"; shift # assume echo option
  fi
  display $opt "$1" $LOG_FORCE
}

# get_ambari_repo: wget the ambari repo file in the correct location. Returns 1
# on errors. Optional arg: $1=the ambari repo URL to be used rather than the
# default url.
function get_ambari_repo(){
 
  local url="$1"
  local REPO_DIR='/etc/yum.repos.d'; local REPO_FILE='ambari.repo'
  local out; local err; local prefix

  # which repo file?
  if [[ -z "$url" ]] ; then # not passed in, use default
    prefix="$(dirname $BASH_SOURCE)" # sourced functions file dir
    url="$($prefix/gen_ambari_repo_url.sh)"
  fi

  [[ -d $REPO_DIR ]] || mkdir -p $REPO_DIR

  # 20 sec max time, overwrites existing repo
  out="$(wget --timeout 20 -O $REPO_DIR/$REPO_FILE $url 2>&1)"
  err=$?
  if (( err != 0 )) ; then
    echo "ERROR $err: ambari repo wget $url: $out"
    return 1
  fi

  return 0
}

# gluster_mnt_vol: on localhost, persist the passed-in volume, node, and mount
# as a native glusterfs-fuse mount with the correct owner and permissions.
# Returns the exit-code from the mount command.
# Note: the order of mounting first then setting perms and owner matters!
# Note: _netdev is appended to the mount opts.
# Args:
#   1=storage node
#   2=volume name
#   3=gluster vol mount dir (includes volname)
#   4=(optional) mount opts
function gluster_mnt_vol() {

  local node=$1; local vol=$2; local mnt=$3; local mntopts=$4
  local owner="yarn:hadoop" # assumes both have been created!
  local perms=0755 # rwxr-xr-x
  local prefix; local err=0

  # append to fstab if not present
  if ! grep -qs $mnt /etc/fstab ; then # mnt not present in fstab
    if [[ -z "$mntopts" ]] ; then # set default mount opts
      prefix="$(dirname $BASH_SOURCE)" # sourced functions file dir
      mntopts="$($prefix/gen_vol_mnt_options.sh)" # required mnt opts
    fi
    mntopts+=',_netdev' # always append _netdev
    # persist mnt in fstab
    echo "adding to /etc/fstab: $node:/$vol $mnt glusterfs $mntopts 0 0"
    echo "$node:/$vol $mnt glusterfs $mntopts 0 0" >>/etc/fstab
  fi

  # create the mount dir
  mkdir -p $mnt 2>&1

  # mount the vol if not already mounted. MUST be done before chmod/chown!
  if (( err == 0 )) && ! grep -qs $mnt /proc/mounts ; then
    echo "creating $vol mount: $mnt with $mntopts"
    mount $mnt 2>&1 # mount via fstab
    err=$?
    (( err == 32 )) && err=0 # 32==already mounted
  fi

  if (( err == 0 )) ; then
    # set owner/perms *after* mounting
    chmod $perms $mnt 2>&1 && chown $owner $mnt 2>&1
    err=$?
  fi

  return $err
}

# hostname_to_ip: convert the passed-in node to its ip address. If the node is
# already an ip addr then leave it as is. Output the ip addr. Returns 1 if 
# getent cannot convert a hostname to an ip and outputs the node in its
# original host format.
function hostname_to_ip() {

  local node="$1"
  local ip; local err

  if is_ip_addr $node ; then
    echo "$node"
  else
    ip="$(getent hosts $node)" # uses dns or /etc/hosts
    err=$?
    if (( err != 0 )) || [[ -z "$ip" ]] ; then
      echo "$node"
    else
      echo "${ip%% *}" # ip addr
    fi
  fi

  (( err != 0 )) && return 1
  return 0
}

# is_ip_addr: returns 0 (true) if the passed-in node appears to be an ipv4
# address, else 1 is returned.
function is_ip_addr() {

  local octet='(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])' # cannot exceed 255
  local ipv4="^$octet\.$octet\.$octet\.$octet$"

  [[ "$1" =~ $ipv4 ]] && return 0 # true
  return 1 # false
}

# ntp_time_sync_check: return 0 if ntpstat on each node exits with 0 (success),
# else return 1. Previously this function attempted to measure time differences
# across the nodes, but this approach was not scalable and had ssh overhead 
# which could lead to returning an error when there wasn't one.
function ntp_time_sync_check() {

  local node

  for node in $@; do
      echo "ntpstat on node $node:"
      ssh $node ntpstat
      (( $? != 0 )) && return 1
  done

  return 0
}

# ntpd_running: verify that ntpd is running and persisted on this node.
function ntpd_running() {

  local errcnt=0

  # is ntpd configured to run on reboot?
  chkconfig ntpd 
  if (( $? != 0 )); then
    echo "ERROR: ntpd not configured to run on reboot"
    ((errcnt++))
  fi

  # verify that ntpd is running
  ps -C ntpd >& /dev/null
  if (( $? != 0 )) ; then
    echo "ntpd is not running"
    ((errcnt++))
  fi

  (( errcnt > 0 )) && return 1
  echo "ntpd is running..."
  return 0
}

# quiet: call display() using LOG_QUIET. $1 can be an echo option or the msg.
function quiet() {

  local opt=''
  if (( ${#1} == 2 )) && [[ ${1:0:1} == '-' && ${1:1:1} =~ [a-z] ]] ; then
    opt="$1"; shift # assume echo option
  fi
  display $opt "$1" $LOG_QUIET
}

# report_version: output and log the calling scritp's name and version id,
# and the current date.
# Args: 1=simple script name (minus .sh),
#       2=(optional) dirname prefix of calling script
function report_version() {

  local me="$1"; local prefix="$2"

  [[ -z "$prefix" ]] && {
    prefix="$(dirname $(readlink -f $BASH_SOURCE))";
    prefix="$(dirname $prefix)"; } # parent of bin/

  quiet '***'
  quiet "*** $me: version $(cat $prefix/VERSION)"
  quiet '***'

  debug "date: $(date)"
}

# setup_firewall: due to random ports (ports opened with port num 0) and
# possibly RMI ports we cannot open up the firewall only for specific hadoop / 
# gluster / ambari related ports. The only solution that allows hadoop to work
# is to open up the entire firewall. If customers want security then they'll 
# need to establish cluster perimeter security, liklely on a separate, private
# network. Returns 1 on errors.
function setup_firewall() {

  local err

  iptables -F		  && \
    service iptables stop && \
    service iptables save && \
    chkconfig iptables off # persist setting

  err=$?
  (( err != 0 )) && {
     echo "ERROR $err: iptables";
     return 1; }

  echo "iptables configured and saved"
  return 0
}

# setup_selinux: set selinux on localhost to permissive mode, which seems to be
# a HDP requirement. Persist this setting. Returns 1 on errors.
function setup_selinux() {

  local err
  local conf='/etc/sysconfig/selinux' # symlink to /etc/selinux/config
  local selinux_key='SELINUX='
  local permissive='permissive'

  # set selinux to permissive (audit errors reported but not enforced)
  setenforce $permissive 2>&1

  # keep selinux permissive on reboots
  if [[ ! -f $conf ]] ; then
    echo "WARN: SELinux config file $conf missing"
    return # nothing more to do...
  fi

  # config SELINUX=permissive which takes effect the next reboot
  sed -i -e "/^$selinux_key/c\\$selinux_key$permissive" $conf
  err=$?
  if (( err != 0 )) ; then
    echo "ERROR $err: trying to set selinux to permissive in $conf"
    return 1
  fi
}

# uniq_nodes: output the unique nodes from the list of nodes provided.
# $@=list of nodes.
function uniq_nodes() {

  local nodes=($@)
 
  printf '%s\n' "${nodes[@]}" | sort -u
}

# validate_ntp_conf: validate the ntp config file by ensuring there is at least
# one time-server suitable for ntp use. Return 1 for errors.
function validate_ntp_conf(){

  local timeserver; local i=1
  local ntp_conf='/etc/ntp.conf'
  local servers=(); local numServers

  if [[ ! -f $ntp_conf ]] ; then
    echo "ERROR: ntp config file \"$ntp_conf\" is missing"
    return 1 # nothing more we can do...
  fi

  servers=($(grep "^ *server " $ntp_conf|awk '{print $2}')) # time-servers
  numServers=${#servers[@]}

  if (( numServers == 0 )) ; then
    echo "ERROR: no server entries in $ntp_conf"
    return 1
  fi

  for timeserver in ${servers[@]} ; do
      ntpdate -q $timeserver >& /dev/null
      (( $? == 0 )) && break # exit loop, found valid time-server
      ((i++))
  done
  if (( i > numServers )) ; then
    echo "ERROR: no suitable time-servers found in $ntp_conf"
    return 1
  fi

  echo "NTP time-server $timeserver is acceptable"
  return 0
}

# verbose: call display() using LOG_VERBOSE. $1 can be echo option(s) or the msg.
function verbose() {

  local opt=''
  if (( ${#1} == 2 )) && [[ ${1:0:1} == '-' && ${1:1:1} =~ [a-z] ]] ; then
    opt="$1"; shift # assume echo option
  fi
  display $opt "$1" $LOG_VERBOSE
}

# verify_gid_uids: checks that the UIDs and GIDs for the hadoop users and hadoop
# group are the same numeric value across all of the passed-in nodes. Returns 1
# on inconsistency errors.
function verify_gid_uids() {

  local nodes="$@"
  local errcnt=0; local out; local err
  local prefix="$(dirname $BASH_SOURCE)" # sourced functions file dir

  verbose "--- verifying consistent hadoop UIDs and GIDs across nodes..."

  out="$($prefix/check_gids.sh $nodes)"
  err=$?
  debug "check_gids: $out"
  if (( err != 0 )) ; then
    ((errcnt++))
    err -e "inconsistent GIDs:\n$out"
  fi

  out="$($prefix/check_uids.sh $nodes)"
  err=$?
  debug "check_uids: $out"
  if (( err != 0 )) ; then
   ((errcnt++))
    err -e "inconsistent UIDs:\n$out"
  fi

  (( errcnt > 0 )) && return 1
  verbose "--- completed verifying hadoop UIDs and GIDs"
  return 0
}

# version_ok: return shell true(0) if the passed-in version string ($1) is
# greater-than-or-equal to the passed-in compare version string ($2). Neither
# version string is expected to have a '+'.
# Args: 
#   1=actual version string, can be longer and more specific than arg2.
#   2=compare-to version string, usually shorter (less specific) than arg1.
function version_ok() {

  local ver=(${1//./ }); local compare_ver=(${2//./ }) # arrays: (v u f)
  local i; local eq

  # nested function to parse out numbers and non-numerics from an individual
  # version string component. $1 and $2 are the two version pieces to compare.
  # Returns 0 if $1 == $2.
  # Returns 1 if $1 < $2.
  # Returns 2 if $1 > $2.
  # Note: numbers are compared using (( ... )) and non-numbers are compared
  #   using [[ ... ]]. This is needed so that "12" compares greater than "9".
  function equal() {
    local arg1; local arg2; local v1; local v2; local j

    # arg1 and arg2 are arrays of the number and/or string parts of a single
    # version component. Eg:
    #   $1="16"      --> arg1 = (16)
    #   $1="16abc"   --> arg1 = (16 abc)
    #   $1="2ab16"   --> arg1 = (2 ab 16)
    #   $1="21e-66"  --> arg1 = (21 e- 66)
    arg1=($(echo "$1" | sed -e 's/\([0-9]\+\)/\1 /g' -e 's/\([^0-9]\+\)/\1 /g'))
    arg2=($(echo "$2" | sed -e 's/\([0-9]\+\)/\1 /g' -e 's/\([^0-9]\+\)/\1 /g'))

    (( ${#arg2[@]} > ${#arg1[@]} )) && return 1 # false, arg2 more specific

    for (( j=0; j<${#arg2[@]}; j++ )); do # only compare arg2 num of pieces
	v1="${arg1[$j]}"
	v2="${arg2[$j]}"
	if [[ "$v1" =~ ^[0-9]+$ && "$v2" =~ ^[0-9]+$ ]]; then # all numeric
	  (( v1 < v2 )) && return 1
	  (( v1 > v2 )) && return 2
	else # non-numeric compare
	  [[ "$v1" < "$v2" ]] && return 1
	  [[ "$v1" > "$v2" ]] && return 2
	fi
    done
    return 0 # same
  }

  ## main

  [[ -z "$compare_ver" ]] || (( ${#compare_ver[@]} == 0 )) && \
    return 0 # true, no compare-to version

  (( ${#compare_ver[@]} > ${#ver[@]} )) && return 1 # false, over specified

  # compare each version component, only look at compare_ver num components
  for (( i=0; i<${#compare_ver[@]}; i++ )); do
      equal "${ver[$i]}" "${compare_ver[$i]}"
      eq=$?
      (( eq == 2 )) && return 0 # true, greater than compare version
      (( eq == 1 )) && return 1 # false, less than compare version
      # else, components are equal so far...
  done
  return 0 # true, equal
}

# vol_exists: invokes gluster vol info to see if VOLNAME exists. Returns 1 on
# errors. 
# Args:
#   $1=volume name,
#   $2=any storage node where gluster cli can be run.
function vol_exists() {

  local vol="$1"; local rhs_node="$2"
  local ssh

  [[ "$rhs_node" == "$HOSTNAME" ]] && ssh='' || ssh="ssh $rhs_node"

  eval "$ssh gluster volume info $VOLNAME >& /dev/null"
  (( $? != 0 )) && return 1
  return 0
}

# warn: call force(). Prepend "WARN" and optional warn number to msg.
# $1= echo option or next arg,
# $2= warning number or next arg,
# $3= message.
function warn() {

  local num=''; local opt=''
  if (( ${#1} == 2 )) && [[ ${1:0:1} == '-' && ${1:1:1} =~ [a-z] ]] ; then
    opt="$1"; shift # assume echo option
  fi
  [[ "$1" == *[!0-9]* ]] || { num=" $1"; shift; } # assume 1st arg is warn num

  force $opt "WARN$num: $1"
} 

# yesno: prompts $1 to stdin and returns 0 if user answers yes, else returns 1.
# The default (just hitting <enter>) is specified by $2.
# $1=prompt (required),
# $2=default (optional): 'y' or 'n' with 'n' being the default default.
function yesno() {

  local prompt="$1"; local default="${2:-n}" # default is no
  local yn

   while true ; do
       read -p "$prompt" yn
       case $yn in
	 [Yy])         return 0;;
	 [Yy][Ee][Ss]) return 0;;
	 [Nn])         return 1;;
	 [Nn][Oo])     return 1;;
	 '') # default
	   [[ "$default" != 'y' ]] && return 1 || return 0
	 ;;
	 *) # unexpected...
	   echo "Expecting a yes/no response, not \"$yn\""
	 ;;
       esac
   done
}
