## constants ##

# log threshold values
LOG_DEBUG=0
LOG_VERBOSE=2
LOG_NORMAL=4 # default
LOG_QUIET=6
LOG_FORCE=9  # force write regardless of VERBOSE setting

# log file path
LOGFILE='/var/log/rhs-hadoop-install.log'

## functions ##

# check_ssh: verify that the user can passwordless ssh to the passed-in list of
# nodes. Returns 1 on errors.
# Args: $@ = list of nodes.
function check_ssh() {

  local nodes="$@"
  local localhost="$(hostname)"
  local node; local err; local errcnt=0

  for node in $nodes; do
      [[ "$node" == "$localhost" ]] && continue # skip
      ssh -q $node exit
      err=$?
      if (( err != 0 )) ; then
        echo "ERROR: cannot connect to node $node"
        ((errcnt++))
      fi
  done

  (( errcnt > 0 )) && return 1
  return 0
}

# debug: call display() using LOG_DEBUG. $1 can be echo option(s) or the msg.
function debug() {

  display "$1" "$2" $LOG_DEBUG
}

# default_nodes: Detects the any/all of the supplied *_node options has been 
# omitted and prompts the user to confirm if they wish to use localhost as 
# the missing node's default value. Following each option is its human readable
# name, eg 'MGMT_NODE' 'management'. Returns 1 if the answer is no.
# Note: the *name* of the variable is passed not its value.
# Note: the node variable is set to HOSTNAME if the user answers yes.
# Uses globals:
#   AUTO_YES
function default_nodes() {

  local varname; local human_name; local node

  while (( $# > 0 )) ; do
    varname=$1; node=${!varname}; human_name="$2"
    if [[ -z "$node" ]] ; then # node omitted
      echo "No $human_name node specified therefore the localhost ($HOSTNAME) is assumed"
      (( ! AUTO_YES )) && ! yesno  "  Continue? [y|N] " && return 1
      eval $varname="$HOSTNAME"
    fi
    shift 2
  done

  return 0
}

# display: append the passed-in message to localhost's logfile, and potentially
# write the message to stdout, depending on the value of the passed-in priority
# setting. A timestamp is prepended to the logfile msg.
# NOTE: $LOGFILE must be defined if logging is desired.
# NOTE: $VERBOSE should be defined if "threshold" echos are desired.
#   $1="-n" or "-e" other echo option, or if no option then $1 = msg,
#   $2=msg prioriy, optional, default=$LOG_VERBOSE,
#   $3=logfile,     optional, default=$LOGFILE.
function display(){

  local opt=''
  [[ ${1:0:1} == '-' ]] && { opt="$1"; shift; }

  local pri=${2:-$LOG_NORMAL} # default msg priority
  local log=${3:-$LOGFILE}
  local verbose=${VERBOSE:-$LOG_DEBUG} # if VERBOSE not set output msg

  [[ -n "$log" ]] && echo "[$(date +%T)] $1" >> $log
  (( pri >= verbose )) && echo $opt "$1"
}

# get_ambari_repo: wget the ambari repo file in the correct location.
function get_ambari_repo(){
 
  local REPO_DIR='/etc/yum.repos.d'
  local REPO_URL='http://public-repo-1.hortonworks.com/ambari/centos6/1.x/updates/1.4.4.23/ambari.repo'
  local out; local err; local errcnt=0

  [[ -d $REPO_DIR ]] || mkdir -p $REPO_DIR
  cd $REPO_DIR

  out="$(wget $REPO_URL 2>&1)"
  err=$?
  if (( err != 0 )) ; then
    echo "ERROR $err: ambari repo wget: $out"
    ((errcnt++))
  fi

  cd - >/dev/null

  (( errcnt > 0 )) && return 1
  return 0
}

# quiet: call display() using LOG_QUIET. $1 can be echo option(s) or the msg.
function quiet() {

  display "$1" "$2" $LOG_QUIET
}

# verbose: call display() using LOG_VERBOSE. $1 can be echo option(s) or the msg.
function verbose() {

  display "$1" "$2" $LOG_VERBOSE
}

# vol_exists: invokes gluster vol info to see if VOLNAME exists. Returns 1 on
# errors. 
# Args:
#   $1=volume name,
#   $2=any storage node where gluster cli can be run.
function vol_exists() {

  local vol="$1"; local rhs_node="$2"
  local ssh

  [[ "$rhs_node" == "$(hostname)" ]] && ssh='' || ssh="ssh $rhs_node"
  eval "$ssh gluster volume info $VOLNAME >& /dev/null"
  (( $? != 0 )) && return 1
  return 0
}

# yesno: prompts $1 to stdin and returns 0 if user answers yes, else returns 1.
# The default (just hitting <enter>) is specified by $2.
# $1=prompt (required),
# $2=default (optional): 'y' or 'n' with 'n' being the default default.
function yesno() {

  local prompt="$1"; local default="${2:-n}" # default is no
  local yn

   while true ; do
       read -p "$prompt" yn
       case $yn in
	 [Yy])         return 0;;
	 [Yy][Ee][Ss]) return 0;;
	 [Nn])         return 1;;
	 [Nn][Oo])     return 1;;
	 '') # default
	   [[ "$default" != 'y' ]] && return 1 || return 0
	 ;;
	 *) # unexpected...
	   echo "Expecting a yes/no response, not \"$yn\""
	 ;;
       esac
   done
}
