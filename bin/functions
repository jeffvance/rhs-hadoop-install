
# check_ssh: verify that the user can passwordless ssh to the passed-in list of
# nodes. Returns 1 on errors.
# Args: $@ = list of nodes.
function check_ssh() {

  local nodes="$@"
  local localhost="$(hostname)"
  local node; local err; local errcnt=0

  for node in $nodes; do
      [[ "$node" == "$localhost" ]] && continue # skip
      ssh -q $node exit
      err=$?
      if (( err != 0 )) ; then
        echo "ERROR: cannot connect to node $node"
        ((errcnt++))
      fi
  done

  (( errcnt > 0 )) && return 1
  return 0
}

# get_ambari_repo: wget the ambari repo file in the correct location.
function get_ambari_repo(){
 
  local REPO_DIR='/etc/yum.repos.d'
  local REPO_URL='http://public-repo-1.hortonworks.com/ambari/centos6/1.x/updates/1.4.4.23/ambari.repo'
  local out; local err; local errcnt=0

  [[ -d $REPO_DIR ]] || mkdir -p $REPO_DIR
  cd $REPO_DIR

  out="$(wget $REPO_URL 2>&1)"
  err=$?
  if (( err != 0 )) ; then
    echo "ERROR $err: ambari repo wget: $out"
    ((errcnt++))
  fi

  cd - >/dev/null

  (( errcnt > 0 )) && return 1
  return 0
}


# vol_exists: invokes gluster vol info to see if VOLNAME exists. Returns 1 on
# errors. 
# Args:
#   $1=volume name,
#   $2=any storage node where gluster cli can be run.
function vol_exists() {

  local vol="$1"; local rhs_node="$2"
  local ssh

  [[ "$rhs_node" == "$(hostname)" ]] && ssh='' || ssh="ssh $rhs_node"
  eval "$ssh gluster volume info $VOLNAME >& /dev/null"
  (( $? != 0 )) && return 1
  return 0
}

# yesno: prompts $1 to stdin and returns 0 if user answers yes, else returns 1.
# The default (just hitting <enter>) is specified by $2.
# $1=prompt (required),
# $2=default (optional): 'y' or 'n' with 'n' being the default default.
function yesno() {

  local prompt="$1"; local default="${2:-n}" # default is no
  local yn

   while true ; do
       read -p "$prompt" yn
       case $yn in
	 [Yy])         return 0;;
	 [Yy][Ee][Ss]) return 0;;
	 [Nn])         return 1;;
	 [Nn][Oo])     return 1;;
	 '') # default
	   [[ "$default" != 'y' ]] && return 1 || return 0
	 ;;
	 *) # unexpected...
	   echo "Expecting a yes/no response, not \"$yn\""
	 ;;
       esac
   done
}
